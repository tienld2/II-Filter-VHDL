-- -------------------------------------------------------------
--
-- Module: butter_wc10_20bit_tb_pkg
-- Generated by MATLAB(R) 8.1 and the Filter Design HDL Coder 2.9.3.
-- Generated on: 2013-09-26 11:31:30
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: /home/MQCO/matlab_iirFilter
-- Name: butter_wc10_20bit
-- InputComplex: on
-- TestBenchName: butter_wc10_20bit_tb
-- TestBenchStimulus: impulse step 
--
-- Filter Settings:
--
-- Filter Specifications:
-- Sampling Frequency : N/A (normalized frequency)
-- Response           : Lowpass
-- Specification      : N,F3dB
-- Filter Order       : 5
-- 3-dB Point         : 0.08
--
-- Discrete-Time IIR Filter (real)
-- -------------------------------
-- Filter Structure    : Direct-Form II, Second-Order Sections
-- Number of Sections  : 3
-- Stable              : Yes
-- Linear Phase        : No
-- Arithmetic          : fixed
-- Numerator           : s16,13 -> [-4 4)
-- Denominator         : s16,14 -> [-2 2)
-- Scale Values        : s16,18 -> [-1.250000e-01 1.250000e-01)
-- Input               : s20,19 -> [-1 1)
-- Section Input       : s16,12 -> [-8 8)
-- Section Output      : s16,10 -> [-32 32)
-- Output              : s20,14 -> [-32 32)
-- State               : s16,15 -> [-1 1)
-- Numerator Prod      : s32,28 -> [-8 8)
-- Denominator Prod    : s32,29 -> [-4 4)
-- Numerator Accum     : s40,28 -> [-2048 2048)
-- Denominator Accum   : s40,29 -> [-1024 1024)
-- Round Mode          : convergent
-- Overflow Mode       : wrap
-- Cast Before Sum     : true
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;


PACKAGE butter_wc10_20bit_tb_pkg IS

  -- Type Definitions
  TYPE filter_in_data_log_type IS ARRAY (0 TO 511) OF std_logic_vector(19 DOWNTO 0);

  -- Constants

  -- Functions
  FUNCTION to_integer( x : IN std_logic) RETURN integer;
  FUNCTION to_hex( x : IN std_logic) RETURN string;
  FUNCTION to_hex( x : IN std_logic_vector) RETURN string;
  FUNCTION to_hex( x : IN bit_vector ) RETURN string;
  FUNCTION to_hex( x : IN signed ) RETURN string;
  FUNCTION to_hex( x : IN unsigned ) RETURN string;
  FUNCTION to_hex( x : IN real ) RETURN string;
  FUNCTION SLICE( x : IN bit_vector; slice : In Integer) RETURN std_logic_vector;
  FUNCTION SLICE( x : IN bit_vector; slice : In Integer) RETURN signed;
  FUNCTION SLICE( x : IN bit_vector; slice : In Integer) RETURN unsigned;

  -- Procedures
  PROCEDURE filter_in_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic);

  PROCEDURE filter_out_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic);

END butter_wc10_20bit_tb_pkg;

PACKAGE BODY butter_wc10_20bit_tb_pkg IS
  FUNCTION to_integer( x : IN std_logic) RETURN integer IS
    VARIABLE int: integer;
  BEGIN
    IF x = '0' THEN
      int := 0;
    ELSE
      int := 1;
    END IF;
    RETURN int;
  END;

  FUNCTION to_hex( x : IN std_logic_vector) RETURN string IS
    VARIABLE result  : STRING(1 TO 256); -- 1024 bits max
    VARIABLE i       : INTEGER;
    VARIABLE imod    : INTEGER;
    VARIABLE j       : INTEGER;
    VARIABLE jinc    : INTEGER;
    VARIABLE newx    : std_logic_vector(1023 DOWNTO 0);
  BEGIN
    newx := (OTHERS => '0');
    IF x'LEFT > x'RIGHT THEN
      j := x'LENGTH-1;
      jinc := -1;
    ELSE
      j := 0;
      jinc := 1;
    END IF;
    FOR i IN x'RANGE LOOP
      newx(j) := x(i);
      j := j+jinc;
    END LOOP;  -- i
    i := x'LENGTH-1;
    imod := x'LENGTH MOD 4;
    IF    imod = 1 THEN i := i+3;
    ELSIF imod = 2 THEN i := i+2;
    ELSIF imod = 3 THEN i := i+1;
    END IF;
    j := 1;
    WHILE i >= 3 LOOP
      IF    newx(i DOWNTO (i-3)) = "0000" THEN result(j) := '0';
      ELSIF newx(i DOWNTO (i-3)) = "0001" THEN result(j) := '1';
      ELSIF newx(i DOWNTO (i-3)) = "0010" THEN result(j) := '2';
      ELSIF newx(i DOWNTO (i-3)) = "0011" THEN result(j) := '3';
      ELSIF newx(i DOWNTO (i-3)) = "0100" THEN result(j) := '4';
      ELSIF newx(i DOWNTO (i-3)) = "0101" THEN result(j) := '5';
      ELSIF newx(i DOWNTO (i-3)) = "0110" THEN result(j) := '6';
      ELSIF newx(i DOWNTO (i-3)) = "0111" THEN result(j) := '7';
      ELSIF newx(i DOWNTO (i-3)) = "1000" THEN result(j) := '8';
      ELSIF newx(i DOWNTO (i-3)) = "1001" THEN result(j) := '9';
      ELSIF newx(i DOWNTO (i-3)) = "1010" THEN result(j) := 'A';
      ELSIF newx(i DOWNTO (i-3)) = "1011" THEN result(j) := 'B';
      ELSIF newx(i DOWNTO (i-3)) = "1100" THEN result(j) := 'C';
      ELSIF newx(i DOWNTO (i-3)) = "1101" THEN result(j) := 'D';
      ELSIF newx(i DOWNTO (i-3)) = "1110" THEN result(j) := 'E';
      ELSIF newx(i DOWNTO (i-3)) = "1111" THEN result(j) := 'F';
      ELSE result(j) := 'X';
      END IF;
      i := i-4;
      j := j+1;
    END LOOP;
    RETURN result(1 TO j-1);
  END;


  FUNCTION to_hex( x : IN std_logic ) RETURN string IS
  BEGIN
    RETURN std_logic'image(x);
  END;


  FUNCTION to_hex( x : IN bit_vector ) RETURN string IS
  BEGIN
    RETURN to_hex( to_stdlogicvector(x) );
  END;


  FUNCTION to_hex( x : IN signed ) RETURN string IS
  BEGIN
    RETURN to_hex( std_logic_vector(x) );
  END;


  FUNCTION to_hex( x : IN unsigned ) RETURN string IS
  BEGIN
    RETURN to_hex( std_logic_vector(x) );
  END;


  FUNCTION to_hex( x : IN real ) RETURN string IS
  BEGIN
    RETURN real'image(x);
  END;


  FUNCTION SLICE( x : IN bit_vector; slice : IN Integer) RETURN std_logic_vector IS
    variable result : std_logic_vector(slice - 1 DOWNTO 0);
  BEGIN
    result := to_stdlogicvector(bit_vector'(x))(slice - 1 DOWNTO 0);
    RETURN result;
  END;


  FUNCTION SLICE( x : IN bit_vector; slice : IN Integer) RETURN signed IS
    variable result : signed(slice -  1 DOWNTO 0);
  BEGIN
    result := signed(to_stdlogicvector(bit_vector'(x))(slice - 1 DOWNTO 0));
    RETURN result;
  END;


  FUNCTION SLICE( x : IN bit_vector; slice : IN Integer) RETURN unsigned IS
    variable result : unsigned(slice -  1 DOWNTO 0);
  BEGIN
    result := unsigned(to_stdlogicvector(bit_vector'(x))(slice - 1 DOWNTO 0));
    RETURN result;
  END;


  PROCEDURE filter_in_data_log_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic) IS
  BEGIN
-- Counter to generate Addr.
    IF reset  = '1' THEN
      addr     <= TO_UNSIGNED(0,9);
    ELSIF clk'event and clk = '1' THEN
      IF rdenb = '1' THEN
        IF (addr = TO_UNSIGNED(511, 9 )) THEN
          addr     <= addr; 
        ELSE
          addr     <= addr + TO_UNSIGNED(1,9); 
        END IF;
      ELSE 
        addr <= addr;
      END IF;
    END IF;

-- Done Signal generation.
    IF reset  = '1' THEN
      done <= '0'; 
    ELSIF (addr = TO_UNSIGNED(511, 9 )) THEN
      done <= '1'; 
    ELSE
      done <= '0'; 
    END IF;
  END filter_in_data_log_procedure;

  PROCEDURE filter_out_procedure 
    (SIGNAL clk      : IN    std_logic;
     SIGNAL reset    : IN    std_logic;
     SIGNAL rdenb    : IN    std_logic;
     SIGNAL addr     : INOUT unsigned(8 DOWNTO 0);
     SIGNAL done     : OUT   std_logic) IS
  BEGIN
-- Counter to generate Addr.
    IF reset  = '1' THEN
      addr     <= TO_UNSIGNED(0,9);
    ELSIF clk'event and clk = '1' THEN
      IF rdenb = '1' THEN
        IF (addr = TO_UNSIGNED(511, 9 )) THEN
          addr     <= addr; 
        ELSE
          addr     <= addr + TO_UNSIGNED(1,9); 
        END IF;
      ELSE 
        addr <= addr;
      END IF;
    END IF;

-- Done Signal generation.
    IF reset  = '1' THEN
      done <= '0'; 
    ELSIF (addr = TO_UNSIGNED(511, 9 )) THEN
      done <= '1'; 
    ELSE
      done <= '0'; 
    END IF;
  END filter_out_procedure;

END butter_wc10_20bit_tb_pkg;

-- -------------------------------------------------------------
--
-- Module: butter_wc10_20bit_tb_data
-- Generated by MATLAB(R) 8.1 and the Filter Design HDL Coder 2.9.3.
-- Generated on: 2013-09-26 11:31:30
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;
USE work.butter_wc10_20bit_tb_pkg.ALL;

PACKAGE butter_wc10_20bit_tb_data IS

  CONSTANT filter_in_data_log_re_force : filter_in_data_log_type;
  CONSTANT filter_in_data_log_im_force : filter_in_data_log_type;
  CONSTANT filter_out_re_expected : filter_in_data_log_type;
  CONSTANT filter_out_im_expected : filter_in_data_log_type;

END butter_wc10_20bit_tb_data;

PACKAGE BODY butter_wc10_20bit_tb_data IS

  CONSTANT filter_in_data_log_re_force : filter_in_data_log_type :=
    (
         X"7ffff",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"7ffff",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000");

  CONSTANT filter_in_data_log_im_force : filter_in_data_log_type :=
    (
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000");

  CONSTANT filter_out_re_expected : filter_in_data_log_type :=
    (
         X"00000",
         X"00004",
         X"00013",
         X"00032",
         X"0006b",
         X"000c3",
         X"0013c",
         X"001d1",
         X"00281",
         X"0033e",
         X"003f4",
         X"00498",
         X"00520",
         X"00582",
         X"005ba",
         X"005c4",
         X"0059d",
         X"00546",
         X"004c8",
         X"00429",
         X"00376",
         X"002b7",
         X"001f7",
         X"0013e",
         X"00092",
         X"ffffa",
         X"fff7a",
         X"fff18",
         X"ffed0",
         X"ffea4",
         X"ffe92",
         X"ffe98",
         X"ffeb6",
         X"ffee0",
         X"fff10",
         X"fff46",
         X"fff80",
         X"fffb8",
         X"fffec",
         X"00018",
         X"0003b",
         X"00056",
         X"00066",
         X"0006f",
         X"00072",
         X"00070",
         X"0006c",
         X"00064",
         X"00059",
         X"0004d",
         X"00044",
         X"00039",
         X"0002c",
         X"00022",
         X"0001a",
         X"00014",
         X"00010",
         X"0000c",
         X"0000a",
         X"00008",
         X"00006",
         X"00004",
         X"00004",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"0000e",
         X"0003b",
         X"000a2",
         X"00161",
         X"0029e",
         X"00477",
         X"00706",
         X"00a57",
         X"00e61",
         X"01313",
         X"01850",
         X"01df4",
         X"023d0",
         X"029af",
         X"02f66",
         X"034c8",
         X"039ad",
         X"03df5",
         X"0418c",
         X"04460",
         X"0466e",
         X"047be",
         X"04862",
         X"0486e",
         X"047f7",
         X"0471a",
         X"045f8",
         X"044aa",
         X"0434f",
         X"041fe",
         X"040c5",
         X"03fb2",
         X"03ed0",
         X"03e26",
         X"03db1",
         X"03d76",
         X"03d71",
         X"03d95",
         X"03ddd",
         X"03e41",
         X"03eb2",
         X"03f2a",
         X"03fa0",
         X"0400a",
         X"04068",
         X"040ba",
         X"040fa",
         X"04122",
         X"0413a",
         X"04140",
         X"04136",
         X"0411d",
         X"040fa",
         X"040ce",
         X"040a1",
         X"04076",
         X"0404c",
         X"04028",
         X"0400c",
         X"03ff6",
         X"03fea",
         X"03fe4",
         X"03fe3",
         X"03fe6",
         X"03fed",
         X"03ff6",
         X"04001",
         X"0400e",
         X"0401c",
         X"0402a",
         X"04036",
         X"0403f",
         X"0404a",
         X"04056",
         X"04060",
         X"04068",
         X"0406e",
         X"04072",
         X"04076",
         X"04078",
         X"0407a",
         X"0407c",
         X"0407c",
         X"0407e",
         X"0407e",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"04080",
         X"0407c",
         X"04069",
         X"0403a",
         X"03fd6",
         X"03f15",
         X"03dd3",
         X"03bf1",
         X"0395b",
         X"0360a",
         X"031fe",
         X"02d48",
         X"02804",
         X"0225a",
         X"01c76",
         X"0168c",
         X"010cd",
         X"00b64",
         X"0067a",
         X"0022e",
         X"ffe9a",
         X"ffbc6",
         X"ff9b4",
         X"ff85e",
         X"ff7b4",
         X"ff7a9",
         X"ff81c",
         X"ff8f1",
         X"ffa12",
         X"ffb62",
         X"ffcc4",
         X"ffe1d",
         X"fff61",
         X"0007c",
         X"00164",
         X"00218",
         X"00294",
         X"002d8",
         X"002e5",
         X"002c3",
         X"0027c",
         X"0021a",
         X"001a5",
         X"0012a",
         X"000b0",
         X"0003c",
         X"fffd7",
         X"fff80",
         X"fff3c",
         X"fff10",
         X"ffefa",
         X"ffef4",
         X"fff00",
         X"fff1a",
         X"fff3d",
         X"fff68",
         X"fff9a",
         X"fffce",
         X"ffffd",
         X"00026",
         X"00046",
         X"0005a",
         X"00065",
         X"0006e",
         X"00071",
         X"00070",
         X"0006a",
         X"00062",
         X"00058",
         X"0004d",
         X"00044",
         X"0003d",
         X"00034",
         X"00028",
         X"0001f",
         X"00018",
         X"00012",
         X"0000e",
         X"0000a",
         X"00008",
         X"00006",
         X"00004",
         X"00004",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002",
         X"00002");

  CONSTANT filter_out_im_expected : filter_in_data_log_type :=
    (
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000",
         X"00000");

END butter_wc10_20bit_tb_data;
-- -------------------------------------------------------------
--
-- Module: butter_wc10_20bit_tb
-- Generated by MATLAB(R) 8.1 and the Filter Design HDL Coder 2.9.3.
-- Generated on: 2013-09-26 11:31:30
-- -------------------------------------------------------------

-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

USE work.butter_wc10_20bit_tb_pkg.ALL;

USE work.butter_wc10_20bit_tb_data.ALL;

ENTITY butter_wc10_20bit_tb IS

END butter_wc10_20bit_tb;


ARCHITECTURE rtl OF butter_wc10_20bit_tb IS
  -- -------------------------------------------------------------
  -- Component Declarations
  -- -------------------------------------------------------------
  COMPONENT butter_wc10_20bit
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in_re                    :   IN    std_logic_vector(19 DOWNTO 0); -- sfix20_En19
         filter_in_im                    :   IN    std_logic_vector(19 DOWNTO 0); -- sfix20_En19
         filter_out_re                   :   OUT   std_logic_vector(19 DOWNTO 0); -- sfix20_En14
         filter_out_im                   :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En14
         );
  END COMPONENT;

  -- -------------------------------------------------------------
  -- Component Configuration Statements
  -- -------------------------------------------------------------
  FOR ALL : butter_wc10_20bit
    USE ENTITY work.butter_wc10_20bit(rtl);

  -- Constants
  CONSTANT clk_high                         : time := 5 ns;
  CONSTANT clk_low                          : time := 5 ns;
  CONSTANT clk_period                       : time := 10 ns;
  CONSTANT clk_hold                         : time := 2 ns;
  CONSTANT MAX_TIMEOUT                    : integer := 3; -- uint32
  CONSTANT MAX_ERROR_COUNT                : integer := 512; -- uint32


  -- Signals
  SIGNAL clk                              : std_logic; -- boolean
  SIGNAL clk_enable                       : std_logic; -- boolean
  SIGNAL reset                            : std_logic; -- boolean
  SIGNAL filter_in_re                     : std_logic_vector(19 DOWNTO 0); -- sfix20_En19
  SIGNAL filter_in_im                     : std_logic_vector(19 DOWNTO 0); -- sfix20_En19
  SIGNAL filter_out_re                    : std_logic_vector(19 DOWNTO 0); -- sfix20_En14
  SIGNAL filter_out_im                    : std_logic_vector(19 DOWNTO 0); -- sfix20_En14

  SIGNAL tb_enb                           : std_logic; -- boolean
  SIGNAL srcDone                          : std_logic; -- boolean
  SIGNAL snkDone                          : std_logic; -- boolean
  SIGNAL testFailure                      : std_logic; -- boolean
  SIGNAL tbenb_dly                        : std_logic; -- boolean
  SIGNAL rdEnb                            : std_logic; -- boolean
  SIGNAL filter_in_data_log_rdenb         : std_logic; -- boolean
  SIGNAL filter_in_data_log_addr          : unsigned(8 DOWNTO 0); -- ufix9
  SIGNAL filter_in_data_log_done          : std_logic; -- boolean
  SIGNAL filter_out_testFailure           : std_logic; -- boolean
  SIGNAL filter_out_timeout               : integer; -- uint32
  SIGNAL filter_out_re_errCnt             : integer; -- uint32
  SIGNAL filter_out_im_errCnt             : integer; -- uint32
  SIGNAL delayLine_out                    : std_logic; -- boolean
  SIGNAL expected_ce_out                  : std_logic; -- boolean
  SIGNAL int_delay_pipe                   : std_logic_vector(0 TO 1); -- boolean
  SIGNAL filter_out_rdenb                 : std_logic; -- boolean
  SIGNAL filter_out_addr                  : unsigned(8 DOWNTO 0); -- ufix9
  SIGNAL filter_out_done                  : std_logic; -- boolean
  SIGNAL filter_out_re_ref                : std_logic_vector(19 DOWNTO 0); -- sfix20_En14
  SIGNAL filter_out_im_ref                : std_logic_vector(19 DOWNTO 0); -- sfix20_En14
  SIGNAL check1_Done                      : std_logic; -- boolean


BEGIN
  -- Component Instances
  u_butter_wc10_20bit: butter_wc10_20bit
    PORT MAP (
              clk                              => clk,
              clk_enable                       => clk_enable,
              reset                            => reset,
              filter_in_re                     => filter_in_re,
              filter_in_im                     => filter_in_im,
              filter_out_re                    => filter_out_re,
              filter_out_im                    => filter_out_im      );


  -- Block Statements
  -- -------------------------------------------------------------
  -- Driving the test bench enable
  -- -------------------------------------------------------------

  tb_enb <= '0' WHEN reset = '1' ELSE 
            '1' WHEN snkDone = '0' ELSE 
            '0' AFTER clk_period * 2;

  completed_msg: PROCESS (clk, reset)
  BEGIN
    IF (reset = '1') THEN 
       -- Nothing to reset here.
    ELSIF clk'event AND clk = '1' THEN
      IF snkDone='1' THEN
        IF (testFailure = '0') THEN
              ASSERT FALSE
                REPORT "**************TEST COMPLETED (PASSED)**************"
                SEVERITY NOTE;
        ELSE
              ASSERT FALSE
                REPORT "**************TEST COMPLETED (FAILED)**************"
                SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

  -- -------------------------------------------------------------
  -- System Clock (fast clock) and reset
  -- -------------------------------------------------------------

  clk_gen: PROCESS
  BEGIN
    clk <= '1';
    WAIT FOR clk_high;
    clk <= '0';
    WAIT FOR clk_low;
    IF snkDone = '1' THEN
      clk <= '1';
      WAIT FOR clk_high;
      clk <= '0';
      WAIT FOR clk_low;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS
  BEGIN
    reset <= '1';
    WAIT FOR clk_period * 2;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR clk_hold;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  -- -------------------------------------------------------------
  -- Testbench clock enable
  -- -------------------------------------------------------------

  tb_enb_delay : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tbenb_dly <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF tb_enb = '1' THEN
        tbenb_dly <= tb_enb;
      END IF;
    END IF; 
  END PROCESS tb_enb_delay;

  rdEnb <= tbenb_dly WHEN snkDone =  '0' ELSE
           '0';

  -- -------------------------------------------------------------
  -- Read the data and transmit it to the DUT
  -- -------------------------------------------------------------

  filter_in_data_log_procedure (
    clk       => clk,
    reset     => reset,
    rdenb     => filter_in_data_log_rdenb,
    addr      => filter_in_data_log_addr,
    done      => filter_in_data_log_done);

  filter_in_data_log_rdenb <= rdEnb;

  stimuli_filter_in_data_log : PROCESS(filter_in_data_log_addr, filter_in_data_log_rdenb)
  BEGIN
    IF filter_in_data_log_rdenb = '1' THEN
      filter_in_re <= filter_in_data_log_re_force(TO_INTEGER(filter_in_data_log_addr)) AFTER clk_hold;
      filter_in_im <= filter_in_data_log_im_force(TO_INTEGER(filter_in_data_log_addr)) AFTER clk_hold;
    END IF;
  END PROCESS stimuli_filter_in_data_log;

  -- -------------------------------------------------------------
  -- Create done signal for Input data
  -- -------------------------------------------------------------

  srcDone <= filter_in_data_log_done;


  ceout_delayLine : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      int_delay_pipe(0 TO 1) <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN 
      IF clk_enable = '1' THEN
        int_delay_pipe(0) <= rdEnb;
        int_delay_pipe(1) <= int_delay_pipe(0);
      END IF;
    END IF; 
  END PROCESS ceout_delayLine;

  delayLine_out <= int_delay_pipe(1);

  expected_ce_out <=  delayLine_out AND clk_enable;

  -- -------------------------------------------------------------
  --  Checker: Checking the data received from the DUT.
  -- -------------------------------------------------------------

  filter_out_procedure (
    clk       => clk,
    reset     => reset,
    rdenb     => filter_out_rdenb,
    addr      => filter_out_addr,
    done      => filter_out_done);

  filter_out_rdenb <= expected_ce_out;

  filter_out_re_ref <= filter_out_re_expected(TO_INTEGER(filter_out_addr));
  filter_out_im_ref <= filter_out_im_expected(TO_INTEGER(filter_out_addr));
  checker_1: PROCESS(clk, reset)
  BEGIN
    IF reset = '1' THEN
      filter_out_timeout <= 0;
      filter_out_re_errCnt <= 0;
      filter_out_testFailure <= '0';
    ELSIF clk'event and clk ='1' THEN
      IF filter_out_rdenb = '1' THEN
        filter_out_timeout <= 0;
        IF (filter_out_re /= filter_out_re_expected(TO_INTEGER(filter_out_addr))) OR (filter_out_im /= filter_out_im_expected(TO_INTEGER(filter_out_addr))) THEN
          filter_out_re_errCnt <= filter_out_re_errCnt + 1;
          filter_out_testFailure <= '1';
          ASSERT FALSE 
            REPORT "Error in filter_out_re/filter_out_im: Expected (real) " 
            & to_hex(filter_out_re_expected(TO_INTEGER(filter_out_addr)))
            & " Actual (real) "
            & to_hex(filter_out_re)
            & " Expected (imaginary) "
            & to_hex(filter_out_im_expected(TO_INTEGER(filter_out_addr)))
            & " Actual (imaginary) "
            & to_hex(filter_out_im)
            SEVERITY ERROR;
          IF filter_out_re_errCnt >= MAX_ERROR_COUNT THEN
            ASSERT FALSE
              REPORT "Number of errors have exceeded the maximum error"
              SEVERITY Warning;
          END IF;
        END IF;
      ELSIF filter_out_timeout > MAX_TIMEOUT AND filter_out_rdenb = '1' THEN
        filter_out_re_errCnt <= filter_out_re_errCnt + 1;
        filter_out_testFailure <= '1';
        ASSERT FALSE
          REPORT "Timeout: Data was not received after timeout."
          SEVERITY FAILURE ;
      ELSIF filter_out_rdenb = '1' THEN
        filter_out_timeout <= filter_out_timeout + 1 ;
      END IF;
    END IF;
  END PROCESS checker_1;

  checkDone_1: PROCESS(clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_Done <= '0';
    ELSIF clk'event and clk ='1' THEN
      IF check1_Done = '0' AND filter_out_done = '1' AND filter_out_rdenb = '1' THEN
        check1_Done <= '1';
      END IF;
    END IF;
  END PROCESS checkDone_1;
  -- -------------------------------------------------------------
  -- Create done and test failure signal for output data
  -- -------------------------------------------------------------

  snkDone <= check1_Done;

  testFailure <= filter_out_testFailure;

  -- -------------------------------------------------------------
  -- Global clock enable
  -- -------------------------------------------------------------
  clk_enable <= tbenb_dly AFTER clk_hold WHEN snkDone = '0' ELSE
                '0' AFTER clk_hold;

  -- Assignment Statements



END rtl;
